import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get AddToFavors => "Add To My Favors";
  String get AfterPay => "Read after pay";
  String get AppName => "Deep Otaku Comic";
  String get AreYouSure => "Are You Sure?";
  String get AutoRegister => "Auto register an account";
  String get BookTitle => "Favor";
  String get BooksIsEmpty => "My Favors is empty";
  String get CANCEL => "Cancel";
  String get ChooseRechargeMoney => "Choose recharge money";
  String get ChooseRechargeType => "Choose recharge type";
  String get CoinName => "gold";
  String get ComicIsEmpty => "Comic list is empty";
  String get DeleteFromFavors => "Remove From Favors";
  String get DoYouWantExitApp => "Do you want to exit?";
  String get ENDOFJSON => "END";
  String get FindBooks => "Go to find";
  String get GoBack => "Go Back";
  String get GoToLogin => "Goto Login Page";
  String get HotTitle => "Hot";
  String get LastPageNoPayed => "buy previous chapter first";
  String get Login => "Login";
  String get LoginClean => "Clean";
  String get LoginCleanThenRegister => "Clean Then Register";
  String get LoginFail => "Login Fail";
  String get LoginFailWithSize => "Name or password length error";
  String get LoginOut => "Login Out";
  String get LoginTitle => "Login Page";
  String get MyBooks => "My Favors";
  String get NAME => "Name";
  String get NEED => "Need";
  String get NO => "No";
  String get NoPayPlatforms => "No Pay platforms found";
  String get NoUserFound => "User not Found";
  String get PASSWORD => "Password";
  String get Pay => "Pay";
  String get PayBuyCoin => "Pay buy gold";
  String get PayFail => "Pay fail";
  String get PayNotStart => "Check not Start";
  String get PayOrder => "Order";
  String get PersonTitle => "Me";
  String get REFRESH => "Refresh";
  String get RechargeError => "Recharge Error";
  String get RechargeNow => "Recharge Now";
  String get ReturnAndPay => "Go back and Pay again";
  String get SURE => "Sure";
  String get UserLeft => "Left";
  String get YES => "Yes";
  String ChapterPageNo(String No) => "NO: $No";
  String PayWithUserLeft(String coin, String money) => "Pay $coin gold(now left: $money)";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get AreYouSure => "是否确定?";
  @override
  String get PayFail => "支付失败";
  @override
  String get PayOrder => "订单";
  @override
  String get RechargeError => "充值出错";
  @override
  String get LoginTitle => "登陆页";
  @override
  String get Pay => "支付";
  @override
  String get PersonTitle => "我的";
  @override
  String get DoYouWantExitApp => "退出漫画程序";
  @override
  String get PayBuyCoin => "宅男币支付";
  @override
  String get LoginClean => "清除";
  @override
  String get BooksIsEmpty => "不收藏怎么追番(^o^)/";
  @override
  String get Login => "登陆";
  @override
  String get FindBooks => "赶紧去找";
  @override
  String get ChooseRechargeMoney => "选择支付金额";
  @override
  String get LoginOut => "注销";
  @override
  String get MyBooks => "我的收藏";
  @override
  String get NAME => "用户名";
  @override
  String get SURE => "确定";
  @override
  String get NEED => "需要";
  @override
  String get PASSWORD => "密码";
  @override
  String get LoginFailWithSize => "用户名或密码长度不足";
  @override
  String get LastPageNoPayed => "请先购买上一章节";
  @override
  String get PayNotStart => "订单未发起";
  @override
  String get ENDOFJSON => "END";
  @override
  String get NoPayPlatforms => "无支付渠道";
  @override
  String get HotTitle => "热们";
  @override
  String get NO => "否";
  @override
  String get RechargeNow => "立刻支付";
  @override
  String get REFRESH => "刷新";
  @override
  String get AddToFavors => "添加到我的收藏";
  @override
  String get NoUserFound => "用户为找到";
  @override
  String get YES => "是";
  @override
  String get ReturnAndPay => "重新支付";
  @override
  String get BookTitle => "收藏";
  @override
  String get AppName => "深宅漫画";
  @override
  String get AfterPay => "购买后阅读";
  @override
  String get ChooseRechargeType => "选择支付渠道";
  @override
  String get AutoRegister => "自动注册";
  @override
  String get LoginCleanThenRegister => "清除并注册";
  @override
  String get UserLeft => "剩余";
  @override
  String get GoBack => "返回";
  @override
  String get DeleteFromFavors => "取消收藏";
  @override
  String get GoToLogin => "跳转至登陆";
  @override
  String get LoginFail => "登陆失败";
  @override
  String get CANCEL => "取消";
  @override
  String get CoinName => "宅男币";
  @override
  String get ComicIsEmpty => "漫画列表为空";
  @override
  String ChapterPageNo(String No) => "第:${No}章";
  @override
  String PayWithUserLeft(String coin, String money) => "支付 $coin 宅男币(剩余: $money)";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          return SynchronousFuture<S>(const $en());
        case "zh_CN":
          return SynchronousFuture<S>(const $zh_CN());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
